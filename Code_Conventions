Code and working process conventions for CL-eshop project.

Firstly look at standard naming/coding conventions for Common Lisp:
http://www.cliki.net/naming%20conventions
http://www.cs.umd.edu/~nau/cmsc421/norvig-lisp-style.pdf
http://google-styleguide.googlecode.com/svn/trunk/lispguide.xml
http://people.ace.ed.ac.uk/staff/medward2/class/moz/cm/doc/contrib/lispstyle.html


Project specific conventions:

- When you need to validate some data, use (if data ...) not (if (not (null data)) ...)

- Add documentation lines, if purpose of function/variable is not obvious

- Use declares with types of arguments (when it's known) at functions' beginning, it makes function more safe to use and allow compiler to make optimizations as well. Example:
(defun setobj (key value &optional type)
   (declare (string key) (symbol type))
   ...)

- For creating pathnames use 'merge-pathnames function

- If you implement a function that returns more than one result, uses values rather than returning the results in a list. If your function returns no results (like a void in C), use (values) to return no values

- All the pathnames should be in config files

- Try to minimize number of warnings. Use (declare (ignore ...)) directives, get rid of unused code

- Don't keep old code in comments. It makes all code much harder to read. If it became needed, you always can restore it from git

- Use for variables "talking names". Bad: (let ((r 0) (pc 0)) ...); Good: (let ((result 0) (product-counter 0)) ...)

- All the closing parenthesis should be on the line with last expression/variable.
Good:
...
result)))
Bad:
...
result)
))

- Don't start any symbol or name with digit. Such symbols have problems with convertion to string and vise-versa

- One-line format strings should start with ~& and end with ~%; Example: (format nil "~&Test line~%")

- Write format directives in uppercase for make them stand out from lowercase text surrounding. Example: (format nil "~&Number ~D~%" num)

- Know format directives! For example for printing string with enclosing commas, use ~S directive, not "\"~A\"".

- You should not use (format nil "~A" value); you should use PRINC-TO-STRING instead.

- When you want to iterate a list and check its elements with some predicate use every, some, notany and notevery directives instead of explicit mapcar or remove-if

- Use short commands for simple number and type checks, such as evenp, oddp, plusp, zerop, stringp, numberp, etc.

- Each keyword in loop macro should start with colon. Example:
(loop
   :for x
   :in (list 1 2 3)
   :do (foo x))
but not
(loop
   for x
   in (list 1 2 3)
   do (foo x))

- When you describe new anonimous function it should follow #'(lambda () ...) (not (lambda () ...)) convention

- http://google-styleguide.googlecode.com/svn/trunk/lispguide.xml?showone=Attention_Required#Attention_Required
